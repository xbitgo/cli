package tpls

import (
	"bytes"
	"text/template"
)

const DITpl = `// Code generated by xbit. DO NOT EDIT.
package {{.Pkg}}

import (
    "log"

    "github.com/xbitgo/core/di"
)

func DIRegister() {
    {{- range .List}}
	{{- if ne .NewReturnsLen 0}}
		{{- if ge .NewReturnsLen 2 }}
		 {{.NameVal}}, err := New{{.Name}}()
		 if err != nil {
             log.Panicf("init DI {{.Pkg}}.{{.Name}}] err: %v", err)
		 }
		{{- else}}
		 	{{.NameVal}} := New{{.Name}}()
		{{- end}}
	{{- else}}
		{{.NameVal}} := &{{.Name}}{}
	{{- end}}
    	di.Register("{{$.Pkg}}.{{.Name}}", {{.NameVal}})
    {{- end}}
}
`

type DI struct {
	Pkg  string // 包名
	List []DItem
}

func NewDI(pkg string) *DI {
	return &DI{
		Pkg:  pkg,
		List: []DItem{},
	}
}

func (d *DI) Execute() ([]byte, error) {
	buf := new(bytes.Buffer)
	tmpl, err := template.New("DI").Parse(DITpl)
	if err != nil {
		return nil, err
	}
	if err := tmpl.Execute(buf, d); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
