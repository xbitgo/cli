package tpls

import (
	"bytes"
	"text/template"
)

const EventRegisterTpl = `// Code generated by xbit. DO NOT EDIT.
package event

import (
    "github.com/xbitgo/core/di"
	"github.com/xbitgo/components/eventbus"
)

func Register() {
	// eventbus初始化
	eventbus.Init()
    {{- range .List}}
	{{.NameVal}}Event := &{{.Name}}Event{}
	eventbus.RegisterSubscriber("{{.Name}}", {{.NameVal}}Event)
    {{- end}}
	// 自定义事件注册
	eventbus.RegisterCustomEvent(NewCustomEvent())
}
`

const CustomEventRegisterTpl = `package event

import (
	"github.com/xbitgo/core/di"
)

type CustomEvent struct {
}

func NewCustomEvent() *CustomEvent {
	custom := &CustomEvent{}
	di.MustBind(custom)
	return custom
}

func (c *CustomEvent) RegisterFunc() map[string]func(args ...string) error {
	return map[string]func(args ...string) error{
		// "DemoFunc": c.DemoFunc,
	}
}
`

type EventRegister struct {
	List []DItem
}

func NewEventRegister() *EventRegister {
	return &EventRegister{
		List: []DItem{},
	}
}

func (d *EventRegister) Execute() ([]byte, error) {
	buf := new(bytes.Buffer)
	tmpl, err := template.New("event.reg").Parse(EventRegisterTpl)
	if err != nil {
		return nil, err
	}
	if err := tmpl.Execute(buf, d); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
